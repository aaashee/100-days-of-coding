//Today is day 1 of my 100 days coding . i m already practising questions on leetcode from past 10 days to build the momentum . i try to solve 3 -4 problems a day.
//thank you . stay tuned
//

//balanced binary tree

class Solution {
public:
    int check(TreeNode* root){
        if(root==nullptr) return 0;
        int lh=check(root->left);
        if(lh==-1) return -1;
        int rh=check(root->right);
        if(rh==-1) return -1;
        if(abs(lh-rh)>1) return -1;
        else 
        return max(lh,rh)+1;
    }
    bool isBalanced(TreeNode* root) {
      return check(root)!=-1;  
    }
};
//3 SUM PROBLEM 
 void twoSum(vector<int>& nums, int k, vector<vector<int>>& result, int target) {
        //Two pointer technique (Sorted array) Things you must not forget in interviews
        
        int i = k, j = nums.size()-1;
        while(i < j) {
            if(nums[i]+nums[j] > target)
                j--;
            else if(nums[i] + nums[j] < target)
                i++;
            else {
                result.push_back({-target, nums[i], nums[j]});
                while(i < j && nums[i] == nums[i+1]) i++;
                while(i < j && nums[j] == nums[j-1]) j--;
                i++; //Things you must not forget in interviews
                j--; //Things you must not forget in interviews
            }
        }
    }
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size() < 3) //Things you must not forget in interviews
            return {};
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        for(int i = 0; i<nums.size()-2; i++) {  //(i<nums.size()-2)Things you must not forget in interviews
            if(i!= 0 && nums[i] == nums[i-1]) { //Things you must not forget in interviews
                continue;
            }
            twoSum(nums, i+1, result, -nums[i]);
        }
        return result;
    }
};

